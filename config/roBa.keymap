#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define QWRT    0
#define NUM     1
#define SYS     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        //       tab {
        //           bindings = <&kp TAB>;
        //           key-positions = <11 12>;
        //       };
        //       shift_tab {
        //           bindings = <&kp LS(TAB)>;
        //           key-positions = <12 13>;
        //       };
        //        muhennkann {
        //            bindings = <&to_layer_0 INT_MUHENKAN>;
        //            key-positions = <11 10>;
        //        };
        //       double_quotation {
        //           bindings = <&kp DOUBLE_QUOTES>;
        //           key-positions = <20 21>;
        //       };
        //       eq {
        //           bindings = <&kp EQUAL>;
        //           key-positions = <24 25>;
        //       };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        QWRT {
            label = "QWRT";
            bindings = <
&mt ESCAPE Q      &kp W                   &kp E                      &kp R         &kp T                                                     &kp Y      &kp U  &kp I      &kp O    &kp P
&kp A             &kp S                   &kp D                      &kp F         &kp G            &kp LEFT_BRACKET      &kp RIGHT_BRACKET  &kp H      &kp J  &kp K      &kp L    &kp SQT
&mt LEFT_SHIFT Z  &kp X                   &kp C                      &kp V         &kp B            &lt 6 SEMICOLON       &lt 3 BACKSLASH    &kp N      &kp M  &kp COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&kp LCTRL         &mt LG(SPACE) LEFT_GUI  &mt LANGUAGE_2 LANGUAGE_1  &kp LEFT_ALT  &lt 2 BACKSPACE  &lt 5 SPACE           &lt 4 ENTER        &lt 1 TAB                             &mt RCTRL MINUS
            >;
        };

        FUNCTION {
            label = "FUN";
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5                      &kp F6  &kp F7  &kp F8  &kp F9          &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &kp LEFT_BRACE  &kp RIGHT_BRACE
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &kp BACKSLASH   &kp EQUAL
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                  &trans
            >;
        };

        NUM {
            label = "NUM";
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                      &kp NUMBER_6  &kp N7    &kp N8        &kp N9           &kp NUMBER_0
&trans        &trans        &trans        &trans        &trans  &trans      &trans  &kp LEFT      &kp DOWN  &kp UP_ARROW  &kp RIGHT_ARROW  &trans
&trans        &trans        &trans        &trans        &trans  &trans      &trans  &trans        &kp HOME  &kp DEL       &kp END          &kp BACKSLASH
&trans        &trans        &trans        &trans        &trans  &trans      &trans  &trans                                                 &kp EQUAL
            >;
        };

        SYS {
            label = "SYS";
            bindings = <
&bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans                                 &trans  &trans  &trans  &trans  &trans
&bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans      &bootloader  &trans  &trans  &trans  &trans  &trans
&trans        &trans          &trans        &trans        &trans        &trans      &trans       &trans  &trans  &trans  &trans  &trans
&trans        &trans          &trans        &trans        &trans        &trans      &trans       &trans                          &trans
            >;
        };

        MOUSE {
            label = "MOUSE";
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            label = "SCROLL";
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        SNIPE {
            label = "SNIPE";
            bindings = <
&trans  &trans  &trans  &trans  &trans                           &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &bootloader  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans                          &trans
            >;
        };

        layer_7 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
